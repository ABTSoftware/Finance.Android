apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdk 34

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    namespace 'com.scitrader.finance'
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // for now expose TA-lib so it can be used outside finance module
    api "com.tictactec:ta-lib:0.4.0"

    // you can reference aars from Maven repository
    def sciChartVersion = '4.5.0.4853'
    api(group: 'com.scichart.library', name: 'core', version: "$sciChartVersion", ext: 'aar')
    api(group: 'com.scichart.library', name: 'data', version: "$sciChartVersion", ext: 'aar')
    api(group: 'com.scichart.library', name: 'drawing', version: "$sciChartVersion", ext: 'aar')
    api(group: 'com.scichart.library', name: 'charting', version: "$sciChartVersion", ext: 'aar')

    // or you can reference aar from libs folder
    // api 'com.scichart:charting:+@aar'
    // api 'com.scichart:core:+@aar'
    // api 'com.scichart:drawing:+@aar'
    // api 'com.scichart:data:+@aar'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'

    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"

    testImplementation 'junit:junit:4.13'
    testImplementation "org.hamcrest:hamcrest-library:2.2"

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "com.github.skydoves:colorpickerview:2.2.3"
}

gradle.projectsEvaluated {
    tasks.findByPath(":finance:publish").dependsOn ":finance:assembleRelease"
}

apply plugin: 'maven-publish'


def publishVersion = project.hasProperty('publishVersion') ? project.property('publishVersion') : System.getenv('publish_VERSION')
def publishUser = project.hasProperty('publishUser') ? project.property('publishUser') : System.getenv('publish_USER')
def publishPassword = project.hasProperty('publishPassword') ? project.property('publishPassword') : System.getenv('publish_PASSWORD')
def publishUrl = project.hasProperty('publishUrl') ? project.property('publishUrl') : System.getenv('publish_URL')

publishing {
    publications {
        aar(MavenPublication) {
            groupId 'com.scitrader'
            artifactId project.getName()
            version publishVersion

            artifact source: file("$buildDir/outputs/aar/${project.getName()}-release.aar") ,extension:"aar"

            pom.withXml {
                def organizationsNode = asNode().appendNode('organization')
                organizationsNode.appendNode('name','SciTrader Ltd')
                def dependenciesNode = asNode().appendNode('dependencies')

                // List all compile dependencies and write to POM
                configurations.api.getAllDependencies().each { Dependency dep ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username publishUser
                password publishPassword
            }
            url publishUrl
        }
    }
}